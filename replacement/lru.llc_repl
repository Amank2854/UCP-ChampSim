#include "cache.h"

// initialize replacement state
vector<uint32_t> currentPartition, newPartition, wayParent;
void CACHE::llc_initialize_replacement()
{  
    currentPartition={16,0,0,0};
    newPartition={4,4,4,4};
    wayParent.assign(16,0);
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{

    uint32_t way=0;
    for(auto x:currentPartition) {
        cout<<x<<" ";
    }
    cout<<endl;
    
    if (currentPartition[cpu]>=newPartition[cpu]) {
        for (way=0; way<NUM_WAY; way++) {
            if (wayParent[way] == cpu and block[set][way].valid == false) {

                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });

                break;
            }
        }

        if (way == NUM_WAY) {
            for (way=0; way<NUM_WAY; way++) {
                if (wayParent[way] == cpu and block[set][way].lru == currentPartition[cpu]-1) {

                    DP ( if (warmup_complete[cpu]) {
                    cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                    cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                    cout << dec << " lru: " << block[set][way].lru << endl; });

                    break;
                }
            }
        }

        cerr << "[" << NAME << "] " << __func__ << " set: " << set << " way: " <<way<< " wayParent: "<< wayParent[way]<<endl;

        if (way == NUM_WAY) {
            cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
            assert(0);
        }

    } else {
        uint32_t currentCore = 0;
        for(currentCore=0; currentCore<NUM_CPUS; currentCore++) {
            if(currentPartition[currentCore]>newPartition[currentCore]) {

                break;
            }
        }

        for (way=0; way<NUM_WAY; way++) {
            if (wayParent[way] == currentCore and block[set][way].valid == false) {

                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });

                break;
            }
        }

        if (way == NUM_WAY) {
            for (way=0; way<NUM_WAY; way++) {
                if (wayParent[way] == currentCore and block[set][way].lru == currentPartition[currentCore]-1) {

                    DP ( if (warmup_complete[cpu]) {
                    cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                    cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                    cout << dec << " lru: " << block[set][way].lru << endl; });

                    break;
                }
            }
        }

        cout<<"SECOND"<<endl;
        if (way == NUM_WAY) {
            cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
            assert(0);
        }

        currentPartition[cpu]++;
        currentPartition[currentCore]--;
        // currentPartition = newPartition;
        wayParent[way] = cpu;

        for(uint32_t i=0;i<LLC_SET;i++) {
            block[i][way].lru=currentPartition[cpu]-1;
        }
    }

    return way;
    // STOP HERE
    // OLD LOGIC STARTS BELOW


}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    // return lru_update(set, way);

    for (uint32_t i=0; i<LLC_WAY; i++) {
        if (wayParent[i] == cpu and block[set][i].lru < block[set][way].lru) {
            block[set][i].lru++;
        }
    }
    block[set][way].lru = 0; // promote to the MRU position
    return;
}

void CACHE::llc_replacement_final_stats()
{

}
